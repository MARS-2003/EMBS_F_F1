enum State { RED, YELLOW, GREEN };

const int tPins[] = {10, 9, 8};
const int pPins[] = {7, 6};
const int button = 5;

const int RED_TIME = 3000;
const int YELLOW_TIME = 1500;
const int GREEN_TIME = 3000;
const int PED_TIME = 3000;
const int SAFETY_DELAY = 1500;
const int SHORT_DELAY = 1000;

State curr = RED, prev;
bool pedReq = false;
int lastButtonState = LOW;

void setup() {
  for (int i = 0; i < 3; i++) pinMode(tPins[i], OUTPUT);
  for (int i = 0; i < 2; i++) pinMode(pPins[i], OUTPUT);
  pinMode(button, INPUT);
  setLights(RED, false);
}

void setLights(State t, bool pedGreen) {
  for (int i = 0; i < 3; i++) digitalWrite(tPins[i], i == t ? HIGH : LOW);
  digitalWrite(pPins[0], pedGreen ? LOW : HIGH);  // Ped RED
  digitalWrite(pPins[1], pedGreen ? HIGH : LOW);  // Ped GREEN
}

void checkButton() {
  int buttonState = digitalRead(button);
  if (buttonState == HIGH && lastButtonState == LOW) pedReq = true;
  lastButtonState = buttonState;
}

void waitAndCheckButton(int ms) {
  for (int i = 0; i < ms; i += 20) {
    checkButton();
    delay(20);
  }
}

void loop() {
  switch (curr) {
    case RED:
      setLights(RED, false);
      waitAndCheckButton(0);
      prev = RED;

      // Safety delay before pedestrian green
      
      setLights(RED, true);      // Pedestrian green
      delay(PED_TIME);
      setLights(RED, false);     // Back to pedestrian red
      
      curr = YELLOW;
      break;

    case YELLOW:
      setLights(YELLOW, false);
      waitAndCheckButton(YELLOW_TIME);
      curr = (prev == RED) ? GREEN : RED;
      break;

    case GREEN:
      setLights(GREEN, false);
      int greenDuration = pedReq ? SHORT_DELAY : GREEN_TIME;
      waitAndCheckButton(greenDuration);
      prev = GREEN;
      pedReq = false;
      curr = YELLOW;
      break;
  }
}
